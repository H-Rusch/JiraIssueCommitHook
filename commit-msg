#! /usr/bin/env python3

import os
import re
import sys
import subprocess

BRANCH_ISSUE_KEY_REGEX = re.compile(r".*?/([a-zA-Z]+?-\d+?)[-/].")
KEY = r"[A-Z]+?-\d+?"
DEFAULT_COMMIT_ISSUE_KEY_REGEX = re.compile(rf"^{KEY}:")

COMMIT_MESSAGE_FORMAT = os.environ.get("COMMIT_MESSAGE_FORMAT")


def get_branch_name() -> str:
    completed_process = subprocess.run(
        ["git", "branch", "--show-current"], capture_output=True
    )

    if completed_process.returncode != 0:
        # the git command returns code 128 when HEAD is corrupted
        return ""

    return completed_process.stdout.decode("utf-8").strip()


def find_issue_key(branch_name: str) -> str | None:
    issue_key_match = BRANCH_ISSUE_KEY_REGEX.match(branch_name)
    if issue_key_match is not None:
        return issue_key_match.group(1).upper()


def tag_commit_if_neccessary(commit_msg_filepath: str, issue_key: str):
    with open(commit_msg_filepath, "r+") as file:
        commit_msg = file.read()

        if not is_already_tagged(commit_msg):
            tag_commit_message(file, issue_key, commit_msg)


def is_already_tagged(commit_msg: str) -> bool:
    if DEFAULT_COMMIT_ISSUE_KEY_REGEX.match(commit_msg):
        return True
    if commit_msg.lower().startswith("no-ticket"):
        return True
    # create custom matcher for custom format
    if COMMIT_MESSAGE_FORMAT is not None and COMMIT_MESSAGE_FORMAT != "":
        pattern = re.escape(COMMIT_MESSAGE_FORMAT)
        pattern = pattern.replace(r"\{\{key\}\}", KEY)
        pattern = pattern.replace(r"\{\{message\}\}", r".+")

        if re.match(pattern, commit_msg):
            return True

    return False


def tag_commit_message(file, issue_key: str, commit_msg: str):
    file.seek(0, 0)
    file.write(format_commit_message(issue_key, commit_msg))


def format_commit_message(issue_key: str, commit_msg: str) -> str:
    if COMMIT_MESSAGE_FORMAT is None or COMMIT_MESSAGE_FORMAT == "":
        return f"{issue_key}: {commit_msg}"
    return COMMIT_MESSAGE_FORMAT.replace(r"{{key}}", issue_key).replace(
        r"{{message}}", commit_msg
    )


commit_msg_filepath = sys.argv[1]
branch_name = get_branch_name()
issue_key = find_issue_key(branch_name)

if issue_key is not None:
    tag_commit_if_neccessary(commit_msg_filepath, issue_key)
