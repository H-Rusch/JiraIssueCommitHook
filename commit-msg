#! /usr/bin/env python

import sys, re
import subprocess

BRANCH_ISSUE_KEY_REGEX = re.compile(r".*?/([A-Z]+?-\d+?)[-/].")
COMMIT_ISSUE_KEY_REGEX = re.compile(r"^[A-Z]+?-\d+?:")


class IssueKeyTagger:
    def __init__(self) -> None:
        self.commit_msg_filepath = sys.argv[1]
        branch_name = self.get_branch_name()
        issue_key = self.find_issue_key(branch_name)

        if issue_key is not None:
            self.tag_commit_if_neccessary(issue_key)

    def get_branch_name(self) -> str:
        completed_process = subprocess.run(["git", "branch", "--show-current"], capture_output=True)

        if completed_process.returncode == 0:
            return completed_process.stdout.decode("utf-8").strip()

        # the git command returns code 128 when not on a valid branch in addition to also just returning no output
        return ""

    def find_issue_key(self, branch_name: str) -> str | None:
        issue_key_match = BRANCH_ISSUE_KEY_REGEX.match(branch_name)
        if issue_key_match is not None:
            return issue_key_match.group(1)

    def tag_commit_if_neccessary(self, issue_key: str):
        with open(self.commit_msg_filepath, "r+") as file:
            commit_msg = file.read()

            if not self.is_already_tagged(commit_msg):
                self.tag_commit_message(file, commit_msg, issue_key)

    def is_already_tagged(self, commit_msg: str) -> bool:
        return COMMIT_ISSUE_KEY_REGEX.match(commit_msg) is not None or commit_msg.lower().startswith("no-ticket")

    def tag_commit_message(self, file, commit_msg: str, issue_key: str):
        file.seek(0, 0)
        file.write(f"{issue_key}: {commit_msg}")


IssueKeyTagger()
